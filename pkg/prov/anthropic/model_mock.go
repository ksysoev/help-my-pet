// Code generated by mockery. DO NOT EDIT.

package anthropic

import (
	"context"

	"github.com/stretchr/testify/mock"
)

// MockModel is an autogenerated mock type for the Model type
type MockModel struct {
	mock.Mock
}

type MockModel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModel) EXPECT() *MockModel_Expecter {
	return &MockModel_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: ctx, formatInstructions, question
func (_m *MockModel) Call(ctx context.Context, formatInstructions string, question string) (string, error) {
	ret := _m.Called(ctx, formatInstructions, question)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, formatInstructions, question)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, formatInstructions, question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModel_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockModel_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - ctx context.Context
//   - formatInstructions string
//   - question string
func (_e *MockModel_Expecter) Call(ctx interface{}, formatInstructions interface{}, question interface{}) *MockModel_Call_Call {
	return &MockModel_Call_Call{Call: _e.mock.On("Call", ctx, formatInstructions, question)}
}

func (_c *MockModel_Call_Call) Run(run func(ctx context.Context, formatInstructions string, question string)) *MockModel_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockModel_Call_Call) Return(_a0 string, _a1 error) *MockModel_Call_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModel_Call_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *MockModel_Call_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModel creates a new instance of MockModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModel {
	mock := &MockModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
