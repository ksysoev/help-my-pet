// Code generated by mockery v2.50.4. DO NOT EDIT.

//go:build !compile

package core

import mock "github.com/stretchr/testify/mock"

// MockPetProfileRepository is an autogenerated mock type for the PetProfileRepository type
type MockPetProfileRepository struct {
	mock.Mock
}

type MockPetProfileRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPetProfileRepository) EXPECT() *MockPetProfileRepository_Expecter {
	return &MockPetProfileRepository_Expecter{mock: &_m.Mock}
}

// GetProfiles provides a mock function with given fields: userID
func (_m *MockPetProfileRepository) GetProfiles(userID string) (*PetProfiles, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProfiles")
	}

	var r0 *PetProfiles
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*PetProfiles, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *PetProfiles); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PetProfiles)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPetProfileRepository_GetProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfiles'
type MockPetProfileRepository_GetProfiles_Call struct {
	*mock.Call
}

// GetProfiles is a helper method to define mock.On call
//   - userID string
func (_e *MockPetProfileRepository_Expecter) GetProfiles(userID interface{}) *MockPetProfileRepository_GetProfiles_Call {
	return &MockPetProfileRepository_GetProfiles_Call{Call: _e.mock.On("GetProfiles", userID)}
}

func (_c *MockPetProfileRepository_GetProfiles_Call) Run(run func(userID string)) *MockPetProfileRepository_GetProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPetProfileRepository_GetProfiles_Call) Return(_a0 *PetProfiles, _a1 error) *MockPetProfileRepository_GetProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPetProfileRepository_GetProfiles_Call) RunAndReturn(run func(string) (*PetProfiles, error)) *MockPetProfileRepository_GetProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// SaveProfiles provides a mock function with given fields: userID, profiles
func (_m *MockPetProfileRepository) SaveProfiles(userID string, profiles *PetProfiles) error {
	ret := _m.Called(userID, profiles)

	if len(ret) == 0 {
		panic("no return value specified for SaveProfiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *PetProfiles) error); ok {
		r0 = rf(userID, profiles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPetProfileRepository_SaveProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveProfiles'
type MockPetProfileRepository_SaveProfiles_Call struct {
	*mock.Call
}

// SaveProfiles is a helper method to define mock.On call
//   - userID string
//   - profiles *PetProfiles
func (_e *MockPetProfileRepository_Expecter) SaveProfiles(userID interface{}, profiles interface{}) *MockPetProfileRepository_SaveProfiles_Call {
	return &MockPetProfileRepository_SaveProfiles_Call{Call: _e.mock.On("SaveProfiles", userID, profiles)}
}

func (_c *MockPetProfileRepository_SaveProfiles_Call) Run(run func(userID string, profiles *PetProfiles)) *MockPetProfileRepository_SaveProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*PetProfiles))
	})
	return _c
}

func (_c *MockPetProfileRepository_SaveProfiles_Call) Return(_a0 error) *MockPetProfileRepository_SaveProfiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPetProfileRepository_SaveProfiles_Call) RunAndReturn(run func(string, *PetProfiles) error) *MockPetProfileRepository_SaveProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPetProfileRepository creates a new instance of MockPetProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPetProfileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPetProfileRepository {
	mock := &MockPetProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
