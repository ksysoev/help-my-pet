// Code generated by mockery v2.50.4. DO NOT EDIT.

//go:build !compile

package core

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockConversationRepository is an autogenerated mock type for the ConversationRepository type
type MockConversationRepository struct {
	mock.Mock
}

type MockConversationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConversationRepository) EXPECT() *MockConversationRepository_Expecter {
	return &MockConversationRepository_Expecter{mock: &_m.Mock}
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockConversationRepository) FindByID(ctx context.Context, id string) (*Conversation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Conversation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Conversation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Conversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConversationRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockConversationRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockConversationRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockConversationRepository_FindByID_Call {
	return &MockConversationRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockConversationRepository_FindByID_Call) Run(run func(ctx context.Context, id string)) *MockConversationRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConversationRepository_FindByID_Call) Return(_a0 *Conversation, _a1 error) *MockConversationRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConversationRepository_FindByID_Call) RunAndReturn(run func(context.Context, string) (*Conversation, error)) *MockConversationRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindOrCreate provides a mock function with given fields: ctx, id
func (_m *MockConversationRepository) FindOrCreate(ctx context.Context, id string) (*Conversation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindOrCreate")
	}

	var r0 *Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Conversation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Conversation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Conversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConversationRepository_FindOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOrCreate'
type MockConversationRepository_FindOrCreate_Call struct {
	*mock.Call
}

// FindOrCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockConversationRepository_Expecter) FindOrCreate(ctx interface{}, id interface{}) *MockConversationRepository_FindOrCreate_Call {
	return &MockConversationRepository_FindOrCreate_Call{Call: _e.mock.On("FindOrCreate", ctx, id)}
}

func (_c *MockConversationRepository_FindOrCreate_Call) Run(run func(ctx context.Context, id string)) *MockConversationRepository_FindOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConversationRepository_FindOrCreate_Call) Return(_a0 *Conversation, _a1 error) *MockConversationRepository_FindOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConversationRepository_FindOrCreate_Call) RunAndReturn(run func(context.Context, string) (*Conversation, error)) *MockConversationRepository_FindOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, conversation
func (_m *MockConversationRepository) Save(ctx context.Context, conversation *Conversation) error {
	ret := _m.Called(ctx, conversation)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Conversation) error); ok {
		r0 = rf(ctx, conversation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConversationRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockConversationRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - conversation *Conversation
func (_e *MockConversationRepository_Expecter) Save(ctx interface{}, conversation interface{}) *MockConversationRepository_Save_Call {
	return &MockConversationRepository_Save_Call{Call: _e.mock.On("Save", ctx, conversation)}
}

func (_c *MockConversationRepository_Save_Call) Run(run func(ctx context.Context, conversation *Conversation)) *MockConversationRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Conversation))
	})
	return _c
}

func (_c *MockConversationRepository_Save_Call) Return(_a0 error) *MockConversationRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConversationRepository_Save_Call) RunAndReturn(run func(context.Context, *Conversation) error) *MockConversationRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConversationRepository creates a new instance of MockConversationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConversationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConversationRepository {
	mock := &MockConversationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
