// Code generated by mockery v2.50.4. DO NOT EDIT.

//go:build !compile

package core

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRateLimiter is an autogenerated mock type for the RateLimiter type
type MockRateLimiter struct {
	mock.Mock
}

type MockRateLimiter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRateLimiter) EXPECT() *MockRateLimiter_Expecter {
	return &MockRateLimiter_Expecter{mock: &_m.Mock}
}

// IsNewQuestionAllowed provides a mock function with given fields: ctx, userID
func (_m *MockRateLimiter) IsNewQuestionAllowed(ctx context.Context, userID string) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsNewQuestionAllowed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRateLimiter_IsNewQuestionAllowed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNewQuestionAllowed'
type MockRateLimiter_IsNewQuestionAllowed_Call struct {
	*mock.Call
}

// IsNewQuestionAllowed is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockRateLimiter_Expecter) IsNewQuestionAllowed(ctx interface{}, userID interface{}) *MockRateLimiter_IsNewQuestionAllowed_Call {
	return &MockRateLimiter_IsNewQuestionAllowed_Call{Call: _e.mock.On("IsNewQuestionAllowed", ctx, userID)}
}

func (_c *MockRateLimiter_IsNewQuestionAllowed_Call) Run(run func(ctx context.Context, userID string)) *MockRateLimiter_IsNewQuestionAllowed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRateLimiter_IsNewQuestionAllowed_Call) Return(_a0 bool, _a1 error) *MockRateLimiter_IsNewQuestionAllowed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRateLimiter_IsNewQuestionAllowed_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockRateLimiter_IsNewQuestionAllowed_Call {
	_c.Call.Return(run)
	return _c
}

// RecordNewQuestion provides a mock function with given fields: ctx, userID
func (_m *MockRateLimiter) RecordNewQuestion(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RecordNewQuestion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRateLimiter_RecordNewQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordNewQuestion'
type MockRateLimiter_RecordNewQuestion_Call struct {
	*mock.Call
}

// RecordNewQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockRateLimiter_Expecter) RecordNewQuestion(ctx interface{}, userID interface{}) *MockRateLimiter_RecordNewQuestion_Call {
	return &MockRateLimiter_RecordNewQuestion_Call{Call: _e.mock.On("RecordNewQuestion", ctx, userID)}
}

func (_c *MockRateLimiter_RecordNewQuestion_Call) Run(run func(ctx context.Context, userID string)) *MockRateLimiter_RecordNewQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRateLimiter_RecordNewQuestion_Call) Return(_a0 error) *MockRateLimiter_RecordNewQuestion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRateLimiter_RecordNewQuestion_Call) RunAndReturn(run func(context.Context, string) error) *MockRateLimiter_RecordNewQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRateLimiter creates a new instance of MockRateLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRateLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRateLimiter {
	mock := &MockRateLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
